version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: supaquery-postgres
    environment:
      POSTGRES_DB: supaquery
      POSTGRES_USER: supaquery
      POSTGRES_PASSWORD: supaquery_password
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - supaquery-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U supaquery -d supaquery"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Memgraph Knowledge Graph Database
  memgraph:
    image: memgraph/memgraph-platform:latest
    container_name: supaquery-memgraph
    ports:
      - "7687:7687"   # Bolt protocol
      - "7444:7444"   # Memgraph Lab
      - "3001:3000"   # Memgraph Lab UI
    volumes:
      - memgraph_data:/var/lib/memgraph
      - memgraph_log:/var/log/memgraph
      - memgraph_etc:/etc/memgraph
    networks:
      - supaquery-network
    environment:
      - MEMGRAPH_CONFIG_FILE=/etc/memgraph/memgraph.conf
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "7687"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # Ollama LLM Service
  ollama:
    image: ollama/ollama:latest
    container_name: supaquery-ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    networks:
      - supaquery-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    # If no GPU, comment out the deploy section above

  # Python FastAPI Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: supaquery-backend
    ports:
      - "8000:8000"
    environment:
      # Database
      - DATABASE_URL=postgresql+asyncpg://supaquery:supaquery_password@postgres:5432/supaquery
      # JWT
      - SECRET_KEY=${SECRET_KEY:-change-this-secret-key-in-production}
      - ACCESS_TOKEN_EXPIRE_MINUTES=30
      # Ollama
      - OLLAMA_HOST=http://ollama:11434
      - OLLAMA_MODEL=llama3.2:latest
      # Memgraph
      - MEMGRAPH_HOST=memgraph
      - MEMGRAPH_PORT=7687
      # Server
      - BACKEND_PORT=8000
      - BACKEND_HOST=0.0.0.0
      # CORS
      - CORS_ORIGINS=http://localhost:3000,http://frontend:3000
      # Storage
      - UPLOAD_DIR=/app/uploads
      - STORAGE_DIR=/app/storage
      # Models
      - EMBEDDING_MODEL=sentence-transformers/all-MiniLM-L6-v2
      - WHISPER_MODEL=tiny
      - CHUNK_SIZE=512
      - CHUNK_OVERLAP=50
      # File Upload
      - MAX_FILE_SIZE=52428800
    volumes:
      - ./backend/uploads:/app/uploads
      - ./backend/storage:/app/storage
      - ./backend/app:/app/app  # Mount app code for hot-reload in dev
    depends_on:
      postgres:
        condition: service_healthy
      memgraph:
        condition: service_healthy
      ollama:
        condition: service_healthy
    networks:
      - supaquery-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped
    # Development: hot-reload
    # command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload
    # Production: no reload
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --workers 4

  # Next.js Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - NEXT_PUBLIC_API_URL=http://localhost:8000
    container_name: supaquery-frontend
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NODE_ENV=production
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - supaquery-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

networks:
  supaquery-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16

volumes:
  postgres_data:
    driver: local
  memgraph_data:
    driver: local
  memgraph_log:
    driver: local
  memgraph_etc:
    driver: local
  ollama_data:
    driver: local
